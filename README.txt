SMART LIBRARY PLATFORM
========================

A comprehensive library management system built with Node.js, Express, MySQL, and MongoDB.
Features include user authentication, book management, borrowing/returning, reviews, and analytics.

FEATURES
--------
âœ… User Authentication & Authorization
âœ… Book Management & Search
âœ… Digital Reading Analytics
âœ… Review & Rating System
âœ… Admin Dashboard
âœ… Advanced Search & Filtering
âœ… Real-time Availability Tracking
âœ… Responsive Web Interface

TECHNOLOGY STACK
----------------
â€¢ Backend: Node.js, Express.js
â€¢ Database: MySQL (primary), MongoDB (analytics)
â€¢ Authentication: JWT tokens with bcrypt
â€¢ Frontend: HTML5, CSS3, JavaScript (ES6+)
â€¢ Security: Helmet.js, CORS, Rate Limiting
â€¢ Styling: Bootstrap 5, Font Awesome

PREREQUISITES
-------------
â€¢ Node.js (v16 or higher)
â€¢ MySQL Server (v8.0 or higher)
â€¢ MongoDB (v5.0 or higher)
â€¢ Git

INSTALLATION STEPS
------------------

1. CLONE THE REPOSITORY
   ```
   git clone <repository-url>
   cd Smart_Library_Platform
   ```

2. INSTALL DEPENDENCIES
   ```
   npm install
   ```

3. DATABASE SETUP
   
   a) MySQL Database:
      - Create a new MySQL database named 'smart_library'
      - Import the schema: mysql -u root -p smart_library < database/mysql_schema.sql
      - Import sample data: mysql -u root -p smart_library < populate_sample_data.sql
   
   b) MongoDB:
      - Ensure MongoDB is running on localhost:27017
      - The application will automatically create the 'smart_library_nosql' database

4. ENVIRONMENT CONFIGURATION
   ```
   cp config.env.example .env
   ```
   
   Edit .env file with your database credentials:
   ```
   DB_HOST=localhost
   DB_USER=root
   DB_PASSWORD=your_mysql_password_here
   DB_NAME=smart_library
   MONGODB_URI=mongodb://localhost:27017/smart_library_nosql
   JWT_SECRET=your_super_secret_jwt_key_here
   ```

## ðŸš€ **Starting the Application**

### **Option 1: Direct Node.js (Recommended for development)**
```bash
node server.js
```

### **Option 2: Windows Batch File (Easiest for Windows users)**
```bash
start_server.bat
```
*Double-click the file or run from command prompt*

### **Option 3: PowerShell Script (Best for Windows users)**
```powershell
.\start_server.ps1
```
*Right-click and "Run with PowerShell" or run from PowerShell*

### **Option 4: Using npm scripts**
```bash
npm start
```

## ðŸ”§ **Troubleshooting Port Conflicts**

If you get "Port 3000 already in use" error:

1. **Use the startup scripts** - They automatically handle port conflicts
2. **Manual fix**: 
   ```bash
   # Stop all Node processes
   taskkill /f /im node.exe
   
   # Or change port in .env file
   PORT=3001
   ```
3. **Wait a few seconds** - Ports take time to be released

PROJECT STRUCTURE
-----------------
```
Smart_Library_Platform/
â”œâ”€â”€ config/                 # Database and configuration files
â”œâ”€â”€ database/              # SQL scripts and database utilities
â”œâ”€â”€ middleware/            # Authentication and validation middleware
â”œâ”€â”€ public/               # Frontend HTML, CSS, and JavaScript
â”œâ”€â”€ routes/               # API route handlers
â”œâ”€â”€ server.js             # Main application server
â”œâ”€â”€ package.json          # Dependencies and scripts
â””â”€â”€ README.txt           # This file
```

API ENDPOINTS
-------------
â€¢ Authentication: /api/auth/*
â€¢ Books: /api/books/*
â€¢ Users: /api/users/*
â€¢ Checkouts: /api/checkouts/*
â€¢ Reviews: /api/reviews/*
â€¢ Admin: /api/admin/*
â€¢ Analytics: /api/analytics/*

DEFAULT USERS
-------------
â€¢ Admin: admin/admin123
â€¢ Staff: staff/staff123
â€¢ Reader: reader/reader123

TROUBLESHOOTING
---------------
1. Port 3000 already in use:
   - Kill existing Node.js processes: taskkill /f /im node.exe
   - Or change PORT in .env file

2. Database connection errors:
   - Verify MySQL and MongoDB are running
   - Check database credentials in .env file
   - Ensure databases exist and are accessible

3. Frontend not loading:
   - Check browser console for JavaScript errors
   - Verify backend server is running
   - Clear browser cache and cookies

DEVELOPMENT
-----------
â€¢ Run tests: npm test
â€¢ Development mode: npm run dev
â€¢ Code follows ESLint standards
â€¢ Uses semantic commit messages

SECURITY FEATURES
-----------------
â€¢ JWT-based authentication
â€¢ Password hashing with bcrypt
â€¢ Rate limiting on API endpoints
â€¢ Content Security Policy (CSP)
â€¢ Input validation and sanitization
â€¢ SQL injection prevention
â€¢ XSS protection

PERFORMANCE FEATURES
--------------------
â€¢ Database connection pooling
â€¢ Efficient SQL queries with indexes
â€¢ MongoDB aggregation pipelines
â€¢ Image proxy with caching
â€¢ Responsive design for all devices

SUPPORT
--------
For issues or questions, please check:
â€¢ Project documentation
â€¢ API endpoint documentation at /api
â€¢ Database schema files in database/ folder

LICENSE
--------
MIT License - see LICENSE file for details

VERSION
--------
Smart Library Platform v1.0.0
Built by Lu Duc Thinh

Last Updated: January 2025
